


#___________________________________________________________
############################################################

import urllib.request

ERROR		= "_eRrOr_"



#___________________________________________________________
############################################################

spcln = "                                                "

_null_ = "\x7F\xFF"
#_____________________________________________________
def fatal( t ): ######################################

	print( "fatal: " + t )

	exit( -1 )
#_____________________________________________________
def	rdurl( url ): ####################################

	try:

		response = urllib.request.urlopen( url )

		t = response.read()

		return str( t )

	except:

		#ERRORCNTR += 1

		print( "error: rdurl: file read error: " + url )

		return ERROR
#_____________________________________________________
def rdfile( f ): #####################################

	try:

		fp = open( f, "r", encoding = "UTF-8" )

		t = fp.read( )

		fp.close()

		return t

	except:

		print( "error: file read error: " + f )

		return _null_
#_______________________________________________
def wrfile( f, t ): ############################

	fp = open( f, "w", encoding = "UTF-8" )

	fp.write( t )

	fp.close()
#_______________________________________________
def getdir( D, fp ): ###########################

	L = os.listdir( fp )

	for l in L:

		t = fp + l

		if os.path.isdir( t ):

			D.append( t + "/" )

		else:

			D.append( t )
#_____________________________________________________
def _ln( t ): ########################################

	return t + "\n"
#_______________________________________________
def _firstln( t ): #############################

	L = t.split( "\n" )

	return L[ 0 ]
#_______________________________________________
def lrspcoff( t ): #############################

	return re.sub( "^[ \t\x0D\x0A]+|[ \t\x0D\x0A]+$", "", t )
#_____________________________________________________
def	inca( D, d ): ####################################

	if ( d in D ):

		D[ d ] = D[ d ] + 1

	else:

		D[ d ] = 1
